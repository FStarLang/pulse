ifeq (,$(PULSE_HOME))
	$(error PULSE_HOME should be defined in the enclosing Makefile as the prefix directory where Pulse was installed, or the root directory of its source repository)
endif

include $(PULSE_HOME)/share/pulse/Makefile.locate-fstar

# List the files that should be verified by verify-extra and verify-all
EXTRA=

# List the files that should NOT be verified at all
FLAKY=

# List additional directories for the include path
SRC_DIRS += .

# List the files that should be verified by verify-core and verify-all
# Those files are the roots from where all dependencies are computed
FSTAR_FILES ?= $(wildcard $(addsuffix /*.fst,$(SRC_DIRS)) $(addsuffix /*.fsti,$(SRC_DIRS)))

# Uncomment the definition of PROFILE below, if you want some basic
# profiling of F* runs It will report the time spent
# on typechecking your file And the time spent in SMT, which is
# included in the total typechecking time

# PROFILE=--profile YOUR_FILE --profile_component 'FStar.Universal.tc_source_file FStar.SMTEncoding'

# Used only for OCaml extraction, not krml extraction
# OCaml or Plugin
FSTAR_ML_CODEGEN ?= OCaml

OTHERFLAGS+=$(PROFILE)

# Backward compatibility with pre typed indexed effects (see F* PR 2760)
OTHERFLAGS+=

WARN_ERROR=

SMT_OPTIONS?=
OTHERFLAGS+=$(WARN_ERROR) $(SMT_OPTIONS)
ALREADY_CACHED_LIST ?= Prims,FStar,PulseCore,Pulse
ALREADY_CACHED = --already_cached $(ALREADY_CACHED_LIST)

# A place to put all build artifacts
ifneq (,$(OUTPUT_DIRECTORY))
  FSTAR_OPTIONS += --odir $(OUTPUT_DIRECTORY)
endif

# A place to put .checked files
ifneq (,$(CACHE_DIRECTORY))
  FSTAR_OPTIONS += --cache_dir $(CACHE_DIRECTORY)
  INCLUDE_PATHS+=$(CACHE_DIRECTORY)
endif

# FIXME: do we still need separate subdirectories for pledges, classes?
INCLUDE_PATHS+=$(SRC_DIRS) $(PULSE_HOME)/lib/pulse $(PULSE_HOME)/lib/pulse/lib $(PULSE_HOME)/lib/pulse/lib/class $(PULSE_HOME)/lib/pulse/lib/pledge $(PULSE_HOME)/lib/pulse/core

FSTAR_OPTIONS += \
		 $(OTHERFLAGS) \
	         $(addprefix --include , $(INCLUDE_PATHS)) \
		 --cache_checked_modules \
		 --load_cmxs pulse

FSTAR=$(FSTAR_HOME)/bin/fstar.exe $(FSTAR_OPTIONS) $(ALREADY_CACHED)

.depend: $(FSTAR_FILES)
ifneq (,$(OUTPUT_DIRECTORY))
	mkdir -p $(OUTPUT_DIRECTORY)
endif
ifneq (,$(CACHE_DIRECTORY))
	mkdir -p $(CACHE_DIRECTORY)
endif
	$(FSTAR) $(FSTAR_DEP_OPTIONS) --dep full $(notdir $(FSTAR_FILES)) --output_deps_to .depend.aux
	mv .depend.aux .depend

depend: .depend

include .depend


# a.fst(i).checked is the binary, checked version of a.fst(i)
$(ALL_CHECKED_FILES): %.checked:
	$(FSTAR) $<
	touch -c $@

verify: $(ALL_CHECKED_FILES)

$(ALL_ML_FILES): %.ml:
	$(FSTAR) $(subst .checked,,$(notdir $<)) --codegen $(FSTAR_ML_CODEGEN) --extract_module $(basename $(notdir $(subst .checked,,$<)))

$(ALL_KRML_FILES): %.krml:
	$(FSTAR) $(notdir $(subst .checked,,$<)) --codegen krml \
	  --extract_module $(basename $(notdir $(subst .checked,,$<)))
	touch -c $@

%.fst-in %.fsti-in:
	@echo $(FSTAR_OPTIONS)

.PHONY: verify clean depend all %.fst-in $.fsti-in

clean:
	rm -f .depend*
ifneq (,$(CACHE_DIRECTORY))
	rm -rf $(CACHE_DIRECTORY)
else
	rm -f *.checked
endif
ifneq (,$(OUTPUT_DIRECTORY))
	rm -rf $(OUTPUT_DIRECTORY)
else
	rm -f *.krml
endif
