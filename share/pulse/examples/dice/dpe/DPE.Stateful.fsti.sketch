module DPEStateful
open DPE
open Pulse.Lib.Pervasives
open EngineTypes
open DPETypes
open EngineCore
open HACL
module SZ = FStar.SizeT
module U8 = FStar.UInt8
let bytes = Seq.seq U8.t
let lbytes (n:nat) = b:bytes { Seq.length b == n }
let uds_t = lbytes (SZ.v uds_len)
noeq
type state_t =
  | SessionStart:
      history:option state_t ->
      state_t

  | EngineInitialized:
      hndl:ctxt_hndl_t ->
      uds:bytes ->
      state_t

  | L0:
      hndl:ctxt_hndl_t ->
      uds:bytes ->
      cdi:bytes ->
      r:engine_record_repr {
        l0_is_authentic r /\
        EngineCore.cdi_functional_correctness cdi uds r
      } ->
      state_t

  | L1:
      hndl:ctxt_hndl_t ->
      r:l1_context_repr_t {
        valid_hkdf_ikm_len dice_digest_len /\
        L0Core.aliasKey_functional_correctness
                    dice_hash_alg dice_digest_len r.cdi r.repr.fwid
                    r.aliasKey_label_len r.repr.aliasKey_label 
                    r.aliasKey_pub r.aliasKey_priv  /\ 
        L0Core.deviceIDCSR_functional_correctness  
                    dice_hash_alg dice_digest_len r.cdi
                    r.deviceID_label_len r.repr.deviceID_label r.deviceIDCSR_ingredients 
                    r.deviceIDCSR_len r.deviceIDCSR  /\      
        L0Core.aliasKeyCRT_functional_correctness 
                    dice_hash_alg dice_digest_len r.cdi r.repr.fwid
                    r.deviceID_label_len r.repr.deviceID_label r.aliasKeyCRT_ingredients 
                    r.aliasKeyCRT_len r.aliasKeyCRT r.aliasKey_pub
      } ->
      state_t

  | SessionClosed:
      state_t

let enabled_action (s:state_t) (hndl:ctxt_hndl_t) (repr:repr_t) : prop =
  match s, repr with
  | SessionStart _, _ -> False
  | EngineInitialized hndl' uds, Engine_repr _ ->
    hndl==hndl'
  | L0 hndl' _uds cdi r, L0_repr _ ->
    hndl==hndl'
  | _ -> False

let transition (s:state_t) (r:repr_t) (hdl:ctxt_hndl_t) (s':state_t) =
  (match s, r, s' with
   | EngineInitialized _ uds, Engine_repr r, L0 h uds' _cdi r' ->
      h == hdl /\
      uds == uds' /\
      r == r'
   | L0 _ uds cdi r, L0_repr l0_repr, L1 h l1_ctxt ->
      h == hdl /\
      l1_ctxt.cdi == cdi /\
      l1_ctxt.repr == l0_repr
   | _ -> False)

val in_state (s:sid_t) (s:state_t): vprop

val get_profile ()
  : stt profile_descriptor_t 
    (requires emp)
    (ensures fun _ -> emp)

val open_session ()
  : stt (option sid_t)
    (requires emp)
    (function
      | None -> emp
      | Some sid -> in_state sid (SessionStart None))
module A = Pulse.Lib.Array

val initialize_context (sid:sid_t)
                       (uds:A.larray U8.t (SZ.v uds_len))
                       (#rd:perm)
                       (#uds_bytes:erased bytes)
  : stt (option ctxt_hndl_t) 
    (requires
      A.pts_to uds #rd uds_bytes ** 
      exists_ (fun h -> in_state sid (SessionStart h)))
    (ensures fun hdl ->
      A.pts_to uds #rd uds_bytes **
      (match hdl with
       | None -> emp //more informative codes; leaves the state unchanged
       | Some hdl -> 
         in_state sid (EngineInitialized hdl uds_bytes)))

val derive_child (sid:sid_t)
                 (ctxt_hndl:ctxt_hndl_t)
                 (record:record_t)
                 (#repr:erased repr_t)
                 (#rd:perm)
                 (#s:state_t)
  : stt (option ctxt_hndl_t) 
    (requires
      record_perm record rd repr **
      in_state sid s **
      pure (enabled_action s ctxt_hndl repr))
    (ensures fun hdl ->
      record_perm record rd repr **
      (match hdl with
       | None -> emp
       | Some hdl ->
         exists_ (fun s' ->
          in_state sid s' **
          pure (transition s repr hdl s'))))

let ctxt_hndl_of_state (s:state_t)
  : option ctxt_hndl_t
  = match s with
    | SessionStart _ -> None
    | EngineInitialized hndl _ -> Some hndl
    | L0 hndl _ _ _ -> Some hndl
    | L1 hndl _ -> Some hndl
    | SessionClosed -> None

val destroy_context (sid:sid_t)
                    (hndl:ctxt_hndl_t)
                    (s:erased state_t)
  : stt bool 
    (requires 
        in_state sid s **
        pure (ctxt_hndl_of_state s == Some hndl))
    (ensures fun _ ->
      in_state sid (SessionStart (Some #state_t s)))

val close_session (sid:sid_t) 
  : stt bool
    (requires exists_ (fun s ->
      in_state sid s))
    (ensures fun b ->
      in_state sid SessionClosed)

