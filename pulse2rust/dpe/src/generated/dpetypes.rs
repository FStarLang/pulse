////
////
//// This file is generated by the Pulse2Rust tool
////
////

pub struct profile_descriptor_t {
    pub name: String,
    pub dpe_spec_version: u32,
    pub max_message_size: u32,
    pub uses_multi_part_messages: bool,
    pub supports_concurrent_operations: bool,
    pub supports_encrypted_sessions: bool,
    pub supports_derived_sessions: bool,
    pub max_sessions: usize,
    pub session_protocol: String,
    pub supports_session_sync: bool,
    pub session_sync_policy: String,
    pub session_migration_protocol: String,
    pub supports_default_context: bool,
    pub supports_context_handles: bool,
    pub max_contexts_per_session: usize,
    pub max_context_handle_size: usize,
    pub supports_auto_init: bool,
    pub supports_simulation: bool,
    pub supports_attestation: bool,
    pub supports_sealing: bool,
    pub supports_get_profile: bool,
    pub supports_open_session: bool,
    pub supports_close_session: bool,
    pub supports_sync_session: bool,
    pub supports_export_session: bool,
    pub supports_import_session: bool,
    pub supports_init_context: bool,
    pub supports_certify_key: bool,
    pub supports_sign: bool,
    pub supports_seal: bool,
    pub supports_unseal: bool,
    pub supports_sealing_public: bool,
    pub supports_rotate_context_handle: bool,
    pub dice_derivation: String,
    pub asymmetric_derivation: String,
    pub symmetric_derivation: String,
    pub supports_any_label: bool,
    pub supported_labels: String,
    pub initial_derivation: String,
    pub input_format: String,
    pub supports_internal_inputs: bool,
    pub supports_internal_dpe_info: bool,
    pub supports_internal_dpe_dice: bool,
    pub internal_dpe_info_type: String,
    pub internal_dpe_dice_type: String,
    pub internal_inputs: String,
    pub supports_certificates: bool,
    pub max_certificate_size: usize,
    pub max_certificate_chain_size: usize,
    pub appends_more_certificates: bool,
    pub supports_certificate_policies: bool,
    pub supports_policy_identity_init: bool,
    pub supports_policy_identity_loc: bool,
    pub supports_policy_attest_init: bool,
    pub supports_policy_attest_loc: bool,
    pub supports_policy_assert_init: bool,
    pub supports_policy_assert_loc: bool,
    pub certificate_policies: String,
    pub supports_eca_certificates: bool,
    pub eca_certificate_format: String,
    pub leaf_certificate_format: String,
    pub public_key_format: String,
    pub supports_external_key: bool,
    pub to_be_signed_format: String,
    pub signature_format: String,
    pub supports_symmetric_sign: bool,
    pub supports_asymmetric_unseal: bool,
    pub supports_unseal_policy: bool,
    pub unseal_policy_format: String,
}
pub fn mk_profile_descriptor(
    name: String,
    dpe_spec_version: u32,
    max_message_size: u32,
    uses_multi_part_messages: bool,
    supports_concurrent_operations: bool,
    supports_encrypted_sessions: bool,
    supports_derived_sessions: bool,
    max_sessions: usize,
    session_protocol: String,
    supports_session_sync: bool,
    session_sync_policy: String,
    session_migration_protocol: String,
    supports_default_context: bool,
    supports_context_handles: bool,
    max_contexts_per_session: usize,
    max_context_handle_size: usize,
    supports_auto_init: bool,
    supports_simulation: bool,
    supports_attestation: bool,
    supports_sealing: bool,
    supports_get_profile: bool,
    supports_open_session: bool,
    supports_close_session: bool,
    supports_sync_session: bool,
    supports_export_session: bool,
    supports_import_session: bool,
    supports_init_context: bool,
    supports_certify_key: bool,
    supports_sign: bool,
    supports_seal: bool,
    supports_unseal: bool,
    supports_sealing_public: bool,
    supports_rotate_context_handle: bool,
    dice_derivation: String,
    asymmetric_derivation: String,
    symmetric_derivation: String,
    supports_any_label: bool,
    supported_labels: String,
    initial_derivation: String,
    input_format: String,
    supports_internal_inputs: bool,
    supports_internal_dpe_info: bool,
    supports_internal_dpe_dice: bool,
    internal_dpe_info_type: String,
    internal_dpe_dice_type: String,
    internal_inputs: String,
    supports_certificates: bool,
    max_certificate_size: usize,
    max_certificate_chain_size: usize,
    appends_more_certificates: bool,
    supports_certificate_policies: bool,
    supports_policy_identity_init: bool,
    supports_policy_identity_loc: bool,
    supports_policy_attest_init: bool,
    supports_policy_attest_loc: bool,
    supports_policy_assert_init: bool,
    supports_policy_assert_loc: bool,
    certificate_policies: String,
    supports_eca_certificates: bool,
    eca_certificate_format: String,
    leaf_certificate_format: String,
    public_key_format: String,
    supports_external_key: bool,
    to_be_signed_format: String,
    signature_format: String,
    supports_symmetric_sign: bool,
    supports_asymmetric_unseal: bool,
    supports_unseal_policy: bool,
    unseal_policy_format: String,
) -> super::dpetypes::profile_descriptor_t {
    super::dpetypes::profile_descriptor_t {
        name: name,
        dpe_spec_version: dpe_spec_version,
        max_message_size: max_message_size,
        uses_multi_part_messages: uses_multi_part_messages,
        supports_concurrent_operations: supports_concurrent_operations,
        supports_encrypted_sessions: supports_encrypted_sessions,
        supports_derived_sessions: supports_derived_sessions,
        max_sessions: max_sessions,
        session_protocol: session_protocol,
        supports_session_sync: supports_session_sync,
        session_sync_policy: session_sync_policy,
        session_migration_protocol: session_migration_protocol,
        supports_default_context: supports_default_context,
        supports_context_handles: supports_context_handles,
        max_contexts_per_session: max_contexts_per_session,
        max_context_handle_size: max_context_handle_size,
        supports_auto_init: supports_auto_init,
        supports_simulation: supports_simulation,
        supports_attestation: supports_attestation,
        supports_sealing: supports_sealing,
        supports_get_profile: supports_get_profile,
        supports_open_session: supports_open_session,
        supports_close_session: supports_close_session,
        supports_sync_session: supports_sync_session,
        supports_export_session: supports_export_session,
        supports_import_session: supports_import_session,
        supports_init_context: supports_init_context,
        supports_certify_key: supports_certify_key,
        supports_sign: supports_sign,
        supports_seal: supports_seal,
        supports_unseal: supports_unseal,
        supports_sealing_public: supports_sealing_public,
        supports_rotate_context_handle: supports_rotate_context_handle,
        dice_derivation: dice_derivation,
        asymmetric_derivation: asymmetric_derivation,
        symmetric_derivation: symmetric_derivation,
        supports_any_label: supports_any_label,
        supported_labels: supported_labels,
        initial_derivation: initial_derivation,
        input_format: input_format,
        supports_internal_inputs: supports_internal_inputs,
        supports_internal_dpe_info: supports_internal_dpe_info,
        supports_internal_dpe_dice: supports_internal_dpe_dice,
        internal_dpe_info_type: internal_dpe_info_type,
        internal_dpe_dice_type: internal_dpe_dice_type,
        internal_inputs: internal_inputs,
        supports_certificates: supports_certificates,
        max_certificate_size: max_certificate_size,
        max_certificate_chain_size: max_certificate_chain_size,
        appends_more_certificates: appends_more_certificates,
        supports_certificate_policies: supports_certificate_policies,
        supports_policy_identity_init: supports_policy_identity_init,
        supports_policy_identity_loc: supports_policy_identity_loc,
        supports_policy_attest_init: supports_policy_attest_init,
        supports_policy_attest_loc: supports_policy_attest_loc,
        supports_policy_assert_init: supports_policy_assert_init,
        supports_policy_assert_loc: supports_policy_assert_loc,
        certificate_policies: certificate_policies,
        supports_eca_certificates: supports_eca_certificates,
        eca_certificate_format: eca_certificate_format,
        leaf_certificate_format: leaf_certificate_format,
        public_key_format: public_key_format,
        supports_external_key: supports_external_key,
        to_be_signed_format: to_be_signed_format,
        signature_format: signature_format,
        supports_symmetric_sign: supports_symmetric_sign,
        supports_asymmetric_unseal: supports_asymmetric_unseal,
        supports_unseal_policy: supports_unseal_policy,
        unseal_policy_format: unseal_policy_format,
    }
}
#[derive(Clone)]
pub struct engine_context_t {
    pub uds: std::vec::Vec<u8>,
}
pub fn mk_engine_context_t(uds: std::vec::Vec<u8>) -> super::dpetypes::engine_context_t {
    super::dpetypes::engine_context_t {
        uds: uds,
    }
}
#[derive(Clone)]
pub struct l0_context_t {
    pub cdi: std::vec::Vec<u8>,
}
pub fn mk_l0_context_t(cdi: std::vec::Vec<u8>) -> super::dpetypes::l0_context_t {
    super::dpetypes::l0_context_t {
        cdi: cdi,
    }
}
#[derive(Clone)]
pub struct l1_context_t {
    pub deviceID_pub: std::vec::Vec<u8>,
    pub aliasKey_priv: std::vec::Vec<u8>,
    pub aliasKey_pub: std::vec::Vec<u8>,
    pub deviceIDCSR_len: u32,
    pub deviceIDCSR: std::vec::Vec<u8>,
    pub aliasKeyCRT_len: u32,
    pub aliasKeyCRT: std::vec::Vec<u8>,
}
pub fn mk_l1_context_t(
    deviceID_pub: std::vec::Vec<u8>,
    aliasKey_pub: std::vec::Vec<u8>,
    aliasKey_priv: std::vec::Vec<u8>,
    deviceIDCSR_len: u32,
    deviceIDCSR: std::vec::Vec<u8>,
    aliasKeyCRT_len: u32,
    aliasKeyCRT: std::vec::Vec<u8>,
) -> super::dpetypes::l1_context_t {
    super::dpetypes::l1_context_t {
        deviceID_pub: deviceID_pub,
        aliasKey_priv: aliasKey_priv,
        aliasKey_pub: aliasKey_pub,
        deviceIDCSR_len: deviceIDCSR_len,
        deviceIDCSR: deviceIDCSR,
        aliasKeyCRT_len: aliasKeyCRT_len,
        aliasKeyCRT: aliasKeyCRT,
    }
}
#[derive(Clone)]
pub enum context_t {
    Engine_context(super::dpetypes::engine_context_t),
    L0_context(super::dpetypes::l0_context_t),
    L1_context(super::dpetypes::l1_context_t),
}
pub fn mk_context_t_engine(
    c: super::dpetypes::engine_context_t,
) -> super::dpetypes::context_t {
    super::dpetypes::context_t::Engine_context(c)
}
pub enum record_t {
    Engine_record(super::enginetypes::engine_record_t),
    L0_record(super::l0types::l0_record_t),
}

