////
////
//// This file is generated by the Pulse2Rust tool
////
////

pub fn count_down(x: &mut i64, __v: ()) -> () {
    let mut keep_going = true;
    while keep_going {
        let n = *x;
        if n == 0 { keep_going = false } else { *x = n - 1 }
    }
}
pub fn count_down2(x: &mut i64, v: ()) -> () {
    let mut keep_going = true;
    let mut decr = 1;
    while keep_going {
        let n = *x;
        if n == 0 {
            keep_going = false
        } else {
            let __anf0 = decr;
            *x = n - __anf0;
        }
    }
}
pub fn count_down3(x: &mut i64, __v: ()) -> () {
    while {
        let n = *x;
        if n == 0 {
            false
        } else {
            *x = n - 1;
            true
        }
    } {}
}
pub fn count_down_loopy(x: &mut i64, __v: ()) -> () {
    while {
        let n = *x;
        if n == 0 {
            false
        } else {
            *x = n + 1;
            true
        }
    } {}
}
pub fn multiply_by_repeated_addition(x: i64, y: i64) -> i64 {
    let mut ctr = 0;
    let mut acc = 0;
    while {
        let __anf0 = ctr;
        __anf0 < x
    } {
        let a = acc;
        acc = a + y;
        let c = ctr;
        ctr = c + 1;
    }
    acc
}
pub fn fib_loop(k: i64) -> i64 {
    let mut i = 1;
    let mut j = 1;
    let mut ctr = 1;
    while {
        let __anf0 = ctr;
        __anf0 < k
    } {
        let vi = i;
        let vj = j;
        let c = ctr;
        ctr = c + 1;
        i = vj;
        j = vi + vj;
    }
    j
}

