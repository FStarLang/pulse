////
////
//// This file is generated by the Pulse2Rust tool
////
////

pub fn read_i<T: Copy>(arr: &mut [T], p: (), s: (), i: usize) -> T {
    arr[i]
}
pub fn write_i<T>(arr: &mut [T], s: (), x: T, i: usize) -> () {
    arr[i] = x;
}
pub fn incr(y: &mut i64, __v: ()) -> () {
    let __anf = *y;
    *y = __anf + 2;
}
pub fn compare<T: PartialEq + Copy>(
    p1: (),
    p2: (),
    a1: &mut [T],
    a2: &mut [T],
    l: usize,
    __s1: (),
    __s2: (),
) -> bool {
    let mut i = 0;
    while {
        let vi = i;
        if vi < l {
            let __anf = a1[vi];
            let __anf1 = a2[vi];
            __anf == __anf1
        } else {
            false
        }
    } {
        let __anf = i;
        i = __anf + 1;
    }
    let __anf = i;
    __anf == l
}
pub fn copy<T: Copy>(
    a1: &mut [T],
    a2: &mut [T],
    l: usize,
    p2: (),
    __s1: (),
    __s2: (),
) -> () {
    let mut i = 0;
    while {
        let __anf = i;
        __anf < l
    } {
        let vi = i;
        let __anf = a2[vi];
        a1[vi] = __anf;
        i = vi + 1;
    }
}
pub fn copy2<T: Copy>(
    a1: &mut [T],
    a2: &mut [T],
    l: usize,
    p2: (),
    __s1: (),
    __s2: (),
) -> () {
    let mut i = 0;
    while {
        let vi = i;
        vi < l
    } {
        let vi = i;
        let v = a2[vi];
        a1[vi] = v;
        i = vi + 1;
    }
}
pub fn compare_stack_arrays(uu___: ()) -> () {
    let a1 = &mut [0; 2];
    let a2 = &mut [0; 2];
    let b = super::pulsetutorial_array::compare((), (), a1, a2, 2, (), ());
}
pub fn heap_arrays(uu___: ()) -> std::vec::Vec<i64> {
    let mut a1 = vec![0; 2];
    let mut a2 = vec![0; 2];
    drop(a1);
    a2
}
pub fn copy_app(mut v: std::vec::Vec<i64>) -> () {
    let a = &mut [0; 2];
    super::pulsetutorial_array::copy2(&mut v, a, 2, (), (), ())
}
pub fn test_match_head(x: &mut std::option::Option<i64>, __v: ()) -> i64 {
    let __anf = *x;
    match __anf {
        Some(mut v) => v,
        None => 0,
    }
}

