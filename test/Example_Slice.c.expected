/* krml header omitted for test repeatability */


#include "Example_Slice.h"

typedef struct slice__uint8_t_s
{
  const uint8_t *elt;
  size_t len;
}
slice__uint8_t;

static slice__uint8_t from_array__uint8_t(uint8_t *a, size_t alen)
{
  const uint8_t *ptr = a;
  return ((slice__uint8_t){ .elt = ptr, .len = alen });
}

typedef struct __Pulse_Lib_Slice_slice_uint8_t_Pulse_Lib_Slice_slice_uint8_t_s
{
  slice__uint8_t fst;
  slice__uint8_t snd;
}
__Pulse_Lib_Slice_slice_uint8_t_Pulse_Lib_Slice_slice_uint8_t;

static __Pulse_Lib_Slice_slice_uint8_t_Pulse_Lib_Slice_slice_uint8_t
split__uint8_t(slice__uint8_t s, size_t i)
{
  const uint8_t *elt_ = s.elt + i;
  slice__uint8_t s1 = { .elt = s.elt, .len = i };
  slice__uint8_t s2 = { .elt = elt_, .len = s.len - i };
  return
    ((__Pulse_Lib_Slice_slice_uint8_t_Pulse_Lib_Slice_slice_uint8_t){ .fst = s1, .snd = s2 });
}

static slice__uint8_t subslice__uint8_t(slice__uint8_t s, size_t i, size_t j)
{
  const uint8_t *elt_ = s.elt + i;
  return ((slice__uint8_t){ .elt = elt_, .len = j - i });
}

static uint8_t op_Array_Access__uint8_t(slice__uint8_t a, size_t i)
{
  return a.elt[i];
}

static size_t len__uint8_t(slice__uint8_t s)
{
  return s.len;
}

void Example_Slice_test(uint8_t *arr)
{
  slice__uint8_t slice = from_array__uint8_t(arr, (size_t)6U);
  __Pulse_Lib_Slice_slice_uint8_t_Pulse_Lib_Slice_slice_uint8_t
  s_ = split__uint8_t(slice, (size_t)2U);
  slice__uint8_t s1 = s_.fst;
  slice__uint8_t s2 = s_.snd;
  slice__uint8_t res = subslice__uint8_t(s2, (size_t)1U, (size_t)4U);
  slice__uint8_t s2_ = res;
  uint8_t x = op_Array_Access__uint8_t(s2_, len__uint8_t(s1));
  KRML_MAYBE_UNUSED_VAR(x);
  __Pulse_Lib_Slice_slice_uint8_t_Pulse_Lib_Slice_slice_uint8_t
  s_1 = split__uint8_t(s2, (size_t)2U);
  KRML_MAYBE_UNUSED_VAR(s_1);
}

