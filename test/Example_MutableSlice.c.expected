/* krml header omitted for test repeatability */


#include "Example_MutableSlice.h"

typedef struct slice__uint8_t_s
{
  uint8_t *elt;
  size_t len;
}
slice__uint8_t;

static slice__uint8_t from_array__uint8_t(uint8_t *a, size_t alen)
{
  uint8_t *ptr = a;
  return ((slice__uint8_t){ .elt = ptr, .len = alen });
}

typedef struct __Pulse_Lib_MutableSlice_slice_uint8_t_Pulse_Lib_MutableSlice_slice_uint8_t_s
{
  slice__uint8_t fst;
  slice__uint8_t snd;
}
__Pulse_Lib_MutableSlice_slice_uint8_t_Pulse_Lib_MutableSlice_slice_uint8_t;

static __Pulse_Lib_MutableSlice_slice_uint8_t_Pulse_Lib_MutableSlice_slice_uint8_t
split__uint8_t(slice__uint8_t s, size_t i)
{
  uint8_t *elt_ = s.elt + i;
  slice__uint8_t s1 = { .elt = s.elt, .len = i };
  slice__uint8_t s2 = { .elt = elt_, .len = s.len - i };
  return
    (
      (__Pulse_Lib_MutableSlice_slice_uint8_t_Pulse_Lib_MutableSlice_slice_uint8_t){
        .fst = s1,
        .snd = s2
      }
    );
}

static slice__uint8_t subslice__uint8_t(slice__uint8_t s, size_t i, size_t j)
{
  uint8_t *elt_ = s.elt + i;
  return ((slice__uint8_t){ .elt = elt_, .len = j - i });
}

static uint8_t op_Array_Access__uint8_t(slice__uint8_t a, size_t i)
{
  return a.elt[i];
}

static size_t len__uint8_t(slice__uint8_t s)
{
  return s.len;
}

static void op_Array_Assignment__uint8_t(slice__uint8_t a, size_t i, uint8_t v)
{
  a.elt[i] = v;
}

static uint8_t *slice_to_arrayptr_intro__uint8_t(slice__uint8_t s)
{
  return s.elt;
}

typedef struct slice__uint8_t0_s
{
  const uint8_t *elt;
  size_t len;
}
slice__uint8_t0;

static slice__uint8_t0 arrayptr_to_slice_intro__uint8_t(const uint8_t *a, size_t alen)
{
  return ((slice__uint8_t0){ .elt = a, .len = alen });
}

static slice__uint8_t0 to_slice__uint8_t(slice__uint8_t s)
{
  size_t len1 = len__uint8_t(s);
  uint8_t *a = slice_to_arrayptr_intro__uint8_t(s);
  const uint8_t *ca = a;
  slice__uint8_t0 res = arrayptr_to_slice_intro__uint8_t(ca, len1);
  return res;
}

static size_t len__uint8_t0(slice__uint8_t0 s)
{
  return s.len;
}

static const uint8_t *slice_to_arrayptr_intro__uint8_t0(slice__uint8_t0 s)
{
  return s.elt;
}

static void copy__uint8_t(slice__uint8_t dst, slice__uint8_t0 src)
{
  size_t slen = len__uint8_t0(src);
  const uint8_t *ssrc = slice_to_arrayptr_intro__uint8_t0(src);
  memcpy(dst.elt, ssrc, slen * sizeof (uint8_t));
}

uint8_t Example_MutableSlice_test(uint8_t *arr)
{
  slice__uint8_t slice = from_array__uint8_t(arr, (size_t)6U);
  __Pulse_Lib_MutableSlice_slice_uint8_t_Pulse_Lib_MutableSlice_slice_uint8_t
  s_ = split__uint8_t(slice, (size_t)2U);
  slice__uint8_t s1 = s_.fst;
  slice__uint8_t s2 = s_.snd;
  slice__uint8_t res = subslice__uint8_t(s2, (size_t)1U, (size_t)4U);
  slice__uint8_t s2_ = res;
  uint8_t x = op_Array_Access__uint8_t(s2_, len__uint8_t(s1));
  op_Array_Assignment__uint8_t(s1, (size_t)1U, x);
  __Pulse_Lib_MutableSlice_slice_uint8_t_Pulse_Lib_MutableSlice_slice_uint8_t
  s_1 = split__uint8_t(s2, (size_t)2U);
  slice__uint8_t s3 = s_1.fst;
  slice__uint8_t s4 = s_1.snd;
  slice__uint8_t0 s4_ = to_slice__uint8_t(s4);
  copy__uint8_t(s3, s4_);
  uint8_t y = op_Array_Access__uint8_t(s3, (size_t)0U);
  uint8_t z = op_Array_Access__uint8_t(s4, (size_t)0U);
  return (uint32_t)x + (uint32_t)y + (uint32_t)z;
}

